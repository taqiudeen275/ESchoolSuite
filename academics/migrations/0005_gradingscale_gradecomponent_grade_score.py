# Generated by Django 5.1.4 on 2025-01-06 16:06

import django.core.validators
import django.db.models.deletion
from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('academics', '0004_attendance'),
        ('students', '0003_admissionapplication_student_parent'),
    ]

    operations = [
        migrations.CreateModel(
            name='GradingScale',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=50)),
                ('level', models.CharField(choices=[('PRIMARY', 'Primary'), ('JHS', 'Junior High School'), ('SHS', 'Senior High School'), ('UNIVERSITY', 'University')], max_length=20)),
                ('grades', models.JSONField()),
                ('is_active', models.BooleanField(default=True)),
            ],
        ),
        migrations.CreateModel(
            name='GradeComponent',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=50)),
                ('component_type', models.CharField(choices=[('QUIZ', 'Quiz'), ('ASSIGNMENT', 'Assignment'), ('MIDSEM', 'Mid-Semester Exam'), ('EXAM', 'Final Exam')], max_length=20)),
                ('max_score', models.DecimalField(decimal_places=2, default=100.0, max_digits=5, validators=[django.core.validators.MinValueValidator(0, message='Score cannot be less than 0.'), django.core.validators.MaxValueValidator(100, message='Score cannot be greater than 100.')])),
                ('weight', models.DecimalField(decimal_places=2, default=0.0, max_digits=5, validators=[django.core.validators.MinValueValidator(0, message='Weight cannot be less than 0.'), django.core.validators.MaxValueValidator(100, message='Weight cannot be greater than 100.')])),
                ('course', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='grade_components', to='academics.course')),
                ('grading_scale', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='academics.gradingscale')),
            ],
        ),
        migrations.CreateModel(
            name='Grade',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('final_grade', models.DecimalField(blank=True, decimal_places=2, max_digits=5, null=True)),
                ('letter_grade', models.CharField(blank=True, max_length=5, null=True)),
                ('date', models.DateField(auto_now_add=True)),
                ('course', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='grades', to='academics.course')),
                ('student', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='grades', to='students.student')),
                ('grading_scale', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='academics.gradingscale')),
            ],
            options={
                'unique_together': {('student', 'course')},
            },
        ),
        migrations.CreateModel(
            name='Score',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('score', models.DecimalField(decimal_places=2, max_digits=5, validators=[django.core.validators.MinValueValidator(0, message='Score cannot be less than 0.'), django.core.validators.MaxValueValidator(100, message='Score cannot be greater than 100.')])),
                ('date', models.DateField(auto_now_add=True)),
                ('component', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='scores', to='academics.gradecomponent')),
                ('student', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='scores', to='students.student')),
            ],
            options={
                'unique_together': {('student', 'component')},
            },
        ),
    ]
